#!/bin/sh
# vim:ts=2:sw=2:et:ai:sts=2

set -e

# Relative PATH to the workdir from this script (usually . or .., empty means .)
RELPATH_TO_WORKDIR=".."

# Variables
DOCKER_HOST="${1:-localhost}"
MONGO_IMAGE="registry.kyso.io/docker/mongo:4.4.15"
MONGO_NAME="mongo-test"
KYSO_API_IMAGE="registry.kyso.io/kyso-io/kyso-api/develop:latest"
KYSO_API_NAME="kyso-api-test"

# ---------
# FUNCTIONS
# ---------

# POSIX compliant version of readlinkf (MacOS does not have coreutils) copied
# from https://github.com/ko1nksm/readlinkf/blob/master/readlinkf.sh
_readlinkf_posix() {
  [ "${1:-}" ] || return 1
  max_symlinks=40
  CDPATH='' # to avoid changing to an unexpected directory
  target=$1
  [ -e "${target%/}" ] || target=${1%"${1##*[!/]}"} # trim trailing slashes
  [ -d "${target:-/}" ] && target="$target/"
  cd -P . 2>/dev/null || return 1
  while [ "$max_symlinks" -ge 0 ] && max_symlinks=$((max_symlinks - 1)); do
    if [ ! "$target" = "${target%/*}" ]; then
      case $target in
      /*) cd -P "${target%/*}/" 2>/dev/null || break ;;
      *) cd -P "./${target%/*}" 2>/dev/null || break ;;
      esac
      target=${target##*/}
    fi
    if [ ! -L "$target" ]; then
      target="${PWD%/}${target:+/}${target}"
      printf '%s\n' "${target:-/}"
      return 0
    fi
    # `ls -dl` format: "%s %u %s %s %u %s %s -> %s\n",
    #   <file mode>, <number of links>, <owner name>, <group name>,
    #   <size>, <date and time>, <pathname of link>, <contents of link>
    # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/ls.html
    link=$(ls -dl -- "$target" 2>/dev/null) || break
    target=${link#*" $target -> "}
  done
  return 1
}

# Change to working directory (script dir + the value of RELPATH_TO_WORKDIR)
cd_to_workdir() {
  _script="$(_readlinkf_posix "$0")"
  _script_dir="${_script%/*}"
  if [ "$RELPATH_TO_WORKDIR" ]; then
    cd "$(_readlinkf_posix "$_script_dir/$RELPATH_TO_WORKDIR")"
  else
    cd "$_script_dir"
  fi
}

wait_for_container() {
  container="$1"
  seconds="1"
  maxloops="30"
  loops="0"
  while [ "$loops" -lt "$maxloops" ]; do
    status="$(docker inspect -f '{{.State.Status}}' "$container")"
    if [ "$status" = "running" ]; then return 0; fi
    sleep "$seconds";
    loops="$((loops + 1))"
  done
  return 1
}

wait_for_host_port() {
  host="$1"
  port="$2"
  seconds="1"
  maxloops="30"
  loops="0"
  while [ "$loops" -lt "$maxloops" ]; do
    if socat /dev/null "TCP:$host:$port" >/dev/null 2>&1; then return 0; fi
    sleep "$seconds";
    loops="$((loops + 1))"
  done
  return 1
}

# ----
# MAIN
# ----

cd_to_workdir

WORK_DIR="$(pwd)"
echo "WORKING DIRECTORY = '$WORK_DIR'"
echo ""

export STORE_ENV_PATH="$WORK_DIR/test/ci_test_env"

echo "Pulling latest version of the mongo container"
docker pull --quiet "$MONGO_IMAGE"

echo "Launching mongo container"
docker run -d --network=host \
  -e MONGO_INITDB_ROOT_USERNAME=kadmin \
  -e MONGO_INITDB_ROOT_PASSWORD=ksecret \
  --name "$MONGO_NAME" "$MONGO_IMAGE"

echo "Waiting for running status"
wait_for_container "$MONGO_NAME"

echo "Waiting for mongo port: $DOCKER_HOST 27017"
ret="0"
wait_for_host_port $DOCKER_HOST 27017 || ret=$?

if [ "$ret" -ne "0" ]; then
  echo "Something went wrong, showing mongo logs"
  docker logs "$MONGO_NAME"
fi

echo "Pulling latest version of the kyso-api container"
docker pull --quiet "$KYSO_API_IMAGE"

echo "Launching kyso-api container"
docker run -d --network=host \
  -v "$STORE_ENV_PATH:/secrets/kyso-api/env" \
  -e DOTENV_FILE=/secrets/kyso-api/env \
  --name "$KYSO_API_NAME" "$KYSO_API_IMAGE"

# Installing node modules
npm install

# Wait for the api container
echo "Waiting for running status (api container)"
wait_for_container "$KYSO_API_NAME"

echo "Waiting for kyso-api port: $DOCKER_HOST 4000"
ret="0"
wait_for_host_port $DOCKER_HOST 4000 || ret=$?

if [ "$ret" -ne "0" ]; then
  echo "Something went wrong, showing kyso-api logs"
  docker logs "$KYSO_API_NAME"
fi

echo "Running tests"
res=0
KYSO_API="http://$DOCKER_HOST:4000/api/v1" npm run test || res="$?"

echo "Cleaning up"

echo "Stopping container '$KYSO_API_NAME'"
docker stop "$KYSO_API_NAME"
echo "Removing container '$KYSO_API_NAME'"
docker rm "$KYSO_API_NAME"

echo "Stopping container '$MONGO_NAME'"
docker stop "$MONGO_NAME"
echo "Removing container '$MONGO_NAME'"
docker rm "$MONGO_NAME"

if [ "$ACCESS_TOKEN_AUTOMATIC_TESTING" ]; then
  if [ "$ACCESS_TOKEN_AUTOMATIC_TESTING_USERNAME" ]; then
    if [ "$CI_COMMIT_TAG" ]; then
      TITLE="Kyso Store Automatic Test Results $CI_COMMIT_TAG"
    else 
      TITLE="Kyso Store Automatic Test Results "`date '+%F %H:%M:%S'`
    fi

    if [ "$GITLAB_USER_EMAIL" ]; then
      DESCRIPTION="Job triggered by $GITLAB_USER_EMAIL"
    else 
      DESCRIPTION="Job triggered by unknown"
    fi

    echo "Setting title: $TITLE"
    echo "Setting description: $DESCRIPTION"
    echo "Logging with: $ACCESS_TOKEN_AUTOMATIC_TESTING_USERNAME"

    echo "Creating report..."
    npx kyso login --provider kyso --kysoInstallUrl https://kyso.io --username $ACCESS_TOKEN_AUTOMATIC_TESTING_USERNAME --token $ACCESS_TOKEN_AUTOMATIC_TESTING
    echo "Creating kyso.yaml file"
    sed -i 's/#TITLE/'"$TITLE"'/g' template-kyso.yaml
    sed -i 's/#DESCRIPTION/'"$DESCRIPTION"'/g' template-kyso.yaml
    cp template-kyso.yaml ./test-results/kyso.yaml
    echo "Uploading report to Kyso.io"
    npx kyso push --path ./test-results --inlineComments n
  else 
    echo "Variable ACCESS_TOKEN_AUTOMATIC_TESTING_USERNAME is not set"
  fi
else
  echo "Variable ACCESS_TOKEN_AUTOMATIC_TESTING is not set"
fi

exit "$res"
